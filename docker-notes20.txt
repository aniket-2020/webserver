docker build
         docker build [options] .
                   -t "app/container_name"    # name   
          ----->>>Create an image from a Dockerfile.
----------------------------------------------------------------------------------------------------

docker run
        docker run [options] IMAGE
                   # see `docker create` for options
         ------>>>>Run a command in an image
----------------------------------------------------------------------------------------------

docker create [options] IMAGE
         -a, --attach               # attach stdout/err
         -i, --interactive          # attach stdin (interactive)
         -t, --tty                  # pseudo-tty
             --name NAME            # name your image
         -p, --publish 5000:5000    # port map
             --expose 5432          # expose a port to linked containers
         -P, --publish-all          # publish all ports
             --link container:alias # linking
         -v, --volume `pwd`:/app    # mount (absolute paths needed)
         -e, --env NAME=hello       # env vars

-----------------example ------------
    $ docker create --name app_redis_1 \
              --expose 6379 \
                   redis:3.0.2
      ----->>>Create a container from an image
  
----------------------------------------------------------------------------------------
  
docker exec
           docker exec [options] CONTAINER COMMAND
                 -d, --detach        # run in background
                 -i, --interactive   # stdin
                 -t, --tty           # interactive
          ===================EXAMPLE================
            
            $ docker exec app_web_1 tail logs/development.log
            $ docker exec -t -i app_web_1 rails c
                   
                      ------>>>>Run commands in a container
-------------------------------------------------------------------------------------------------

docker start
          docker start [options] CONTAINER
                        -a, --attach        # attach stdout/err
                        -i, --interactive   # attach stdin

 docker stop [options] CONTAINER
               ----->>>Start/stop a container

---------------------------------------------------------------------------------------------

docker ps
         $ docker ps
         $ docker ps -a
         $ docker kill $ID
           ------->>>>Manage containers using ps/kill.

-----------------------------------------------------------------------------------------------

Images
      # docker images
      # docker images -a   # also show intermediate

       docker rmi
         # docker rmi $img-ID --------for delete the image

--------------------------------------------------------------------------------------------


###   Dockerfile   ###
    
      -> Inheritance
              FROM ruby:2.2.2
      
      -> Variables
              ENV APP_HOME /myapp
              RUN mkdir $APP_HOME
      
      -> Initialization
              RUN bundle install
              WORKDIR /myapp
              VOLUME ["/data"]  ----- Specification for mount point
              ADD file.xyz /file.xyz
              COPY --chown=user:group host_file.xyz /path/container_file.xyz
      
      -> Onbuild
              ONBUILD RUN bundle install  ------when used with another file

      -> Commands
              EXPOSE 5900
              CMD    ["bundle", "exec", "rails", "server"]
     
      -> Entrypoint
              ENTRYPOINT ["executable", "param1", "param2"]
              ENTRYPOINT command param1 param2
              Configures a container that will run as an executable.

              ENTRYPOINT exec top -b ---------This will use shell processing to substitute shell variables, and will ignore any CMD or docker run command line arguments.

       -> Metadata
              LABEL version="1.0"
              LABEL "com.example.vendor"="ACME Incorporated"
              LABEL com.example.label-with-value="foo"
              LABEL description="This text illustrates \
                       ------that label-values can span multiple lines."  

